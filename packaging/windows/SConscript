# vi: syntax=python:et:ts=4
from subprocess import Popen, call, PIPE
from os.path import join
from glob import glob
import SCons.Node
Import("env")

binaries = ["wesnoth", "wesnothd"]
for bin in binaries:
    #icon = env.Command(bin + "-icon.ico", join("../../icons", bin + "-icon.png"), "$IM_CONVERT $SOURCE $TARGET")
    try:
        env["RCCOM"] = '$RC $_CPPDEFFLAGS $RCINCFLAGS ${RCINCPREFIX} ${SOURCE.dir} $RCFLAGS -i $SOURCE -o $TARGET'
        res = [env.RES(bin + ".rc", CPPPATH=["#/"])]
        #env.Depends(res, icon)
    except AttributeError:
        res = []
    env[bin + "_res"] = res

def WindowsInstaller(env, files):
    files = map(Entry, Flatten(files))
    env["NSIS_INSTALL_FILES"] = ""
    env["NSIS_UNINSTALL_FILES"] = ""
    try:
        env["version_major"] = ".".join(env["version"].split(".")[0:2])
    except:
        env["version_major"] = ""
    for file in files:
        if not file:
            continue
        if file.isdir() or isinstance(file, SCons.Node.FS.Dir):
            env["NSIS_INSTALL_FILES"] += 'SetOutPath "$INSTDIR\\' + file.path + '"\n  '
            env["NSIS_INSTALL_FILES"] += "File /r /x .* " + file.path + "\\*.*\n  "
            env["NSIS_UNINSTALL_FILES"] += "RMDir /r $INSTDIR\\" + file.name + "\n  "
        else:
            env["NSIS_INSTALL_FILES"] += 'SetOutPath "$INSTDIR"\n  '
            env["NSIS_INSTALL_FILES"] += "File " + file.path + "\n  "
            env["NSIS_UNINSTALL_FILES"] += "Delete $INSTDIR\\" + file.name + "\n  "
    env.ScanReplace("#/Wesnoth.nsi", "#/packaging/windows/Wesnoth.nsi.in")

    env.Alias("windows-installer", [files, "#/Wesnoth.nsi"], "makensis ${SOURCES[-1]}")

env.AddMethod(WindowsInstaller)


def WinPatch(patch7z, empty, env):
	Version = env["version"].rsplit(".",1)
	FDset, FAset = set(), set(["deletelist.txt", "wesnoth.exe", "wesnothd.exe"])

	if Version[0] == "1.12":
		FAset |= set(["libvorbis-0.dll", "libvorbisfile-3.dll"])

	if env["nls"]:
		FAset.add("translations\\")

	# We're iterating over all releases to catch changes that were reverted later on.
	# Except for this special case, which gfgtdf noted, the first iteration would suffice.
	for rev in range(int(Version[1])):
		proc = Popen(['git', 'diff', '--name-status', Version[0]+'.'+str(rev), 'HEAD',
				'--', 'data', 'fonts', 'images', 'sounds', 'doc/manual'], stdout=PIPE)

		for line in proc.communicate()[0].splitlines():
			AMD_name = line.split('\t')
			print AMD_name
			if AMD_name[0] == 'D':
				FDset.add(AMD_name[1].lstrip("doc/"))
			else:
				FAset.add(AMD_name[1])


	with open("deletelist.txt", 'w') as f:
		for item in FDset:
			f.write(item.replace('/', '\\') + '\n')

	with open("patch.txt", 'w') as f:
		for item in FAset:
			f.write(item.replace('/', '\\') + '\n')

	# 'rn' requires 7zip 15.05 or higher: http://www.7-zip.org/download.html
	call(['7z.exe', 'a', '-t7z', patch7z, '@patch.txt'])
	call(['7z.exe', 'rn', patch7z, 'doc/manual', 'manual', 'README.md', 'README.txt'])

	call(['rm', 'deletelist.txt'])
	call(['rm', 'patch.txt'])

env.AddMethod(WinPatch)
env.Command("patch.7z", None, WinPatch)

env.Command("Windows-Patcher", "patch.7z", "makensis /DVersion_M='Version[0]' /DPatch=Version[1] packaging/windows/Patch.nsi")

env.Command("Windows-Updater", "patch.7z", "makensis /DVersion_M='Version[0]' /DPatch=Download packaging/windows/Patch.nsi")
